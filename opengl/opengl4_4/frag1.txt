#version 330

uniform vec3 Ambient;
uniform vec3 LightColor;
uniform vec3 LightPosition; // location of the light, eye space
uniform float Shininess;
uniform float Strength;
uniform vec3 EyeDirection;
uniform float ConstantAttenuation; // attenuation coefficients
uniform float LinearAttenuation;
uniform float QuadraticAttenuation;
uniform mat4 viewMatrix ;
uniform sampler2D tex;


in vec4 Color;
in vec3 Normal;
in vec4 Position;
in vec3 lightPos;

in vec2 vs_tex_coord;


out vec4 outputF;


 
void main()
{	
    // find the direction and distance of the light,
	// which changes fragment to fragment for a local light
	vec3 lightPosView = vec3 (viewMatrix * vec4 (LightPosition, 1.0));
	//vec3 lightDirection = LightPosition - vec3(Position);
	vec3 lightDirectionView = lightPosView - vec3(Position);
	//float lightDistance = length(lightDirection);
	float lightDistance = length(lightDirectionView);

	//vec3 lightDirection = LightPosition - vec3(Position);
	//float lightDistance = length(lightDirection);

	// normalize the light direction vector, so
	// that a dot products give cosines
	lightDirection = lightDirection / lightDistance;

	// model how much light is available for this fragment
	float attenuation = 1.0 / (ConstantAttenuation + LinearAttenuation * lightDistance + QuadraticAttenuation * lightDistance * lightDistance);

	// the direction of maximum highlight also changes per fragment
	vec3 halfVector = normalize(lightDirection + EyeDirection);

	float diffuse = max(0.0, dot(Normal, lightDirection));
	float specular = max(0.0, dot(Normal, halfVector));

	//diffuse = 0.7;
	//specular = 0.0;

	if (diffuse == 0.0)
		specular = 0.0;
	else
		specular = pow(specular, Shininess) * Strength;

	

	//vec3 scatteredLight = Ambient + LightColor * diffuse * attenuation;
	//vec3 scatteredLight = LightColor * diffuse * attenuation;
	vec3 scatteredLight = Ambient + LightColor * diffuse ;
	vec3 reflectedLight = LightColor * specular * attenuation;
	vec3 rgb = min(Color.rgb * scatteredLight + reflectedLight ,vec3(1.0));
	outputF = vec4(rgb, Color.a);
	
	//vec4 scatteredLight1 = vec4(Ambient, 1.0); // this is the only light

	// modulate surface color with light, but saturate at white
	//outputF = min(Color * scatteredLight1, vec4(1.0));
	//outputF = vec4(Ambient, 1.0 );
	//outputF = Color ;

	outputF = texture(tex, vs_tex_coord);
	
	
}