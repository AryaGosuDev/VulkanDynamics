#version 330

uniform vec3 Ambient;
uniform vec3 LightColor;
uniform vec3 LightPosition; // location of the light, eye space
uniform float Shininess;
uniform float Strength;
uniform vec3 EyeDirection;
uniform float ConstantAttenuation; // attenuation coefficients
uniform float LinearAttenuation;
uniform float QuadraticAttenuation;
uniform mat4 viewMatrix ;
uniform mat4 eyeViewMatrix;


in vec4 Color;
in vec3 Normal;
in vec4 Position;
in vec3 lightPos;


out vec4 outputF;
out vec4 position;


 
void main()
{	
    
	//vec3 lightPosView = vec3 (viewMatrix * vec4 (LightPosition, 1.0));
	vec3 lightPosView = vec3 (eyeViewMatrix * vec4 (LightPosition, 1.0));
	
	vec3 lightDirectionView = lightPosView - vec3(Position);
	
	float lightDistance = length(lightDirectionView);

	//vec3 eyeDirectionView = vec3 (viewMatrix * vec4 (EyeDirection, 1.0));
	
	// normalize the light direction vector, so
	// that a dot products give cosines
	lightDirectionView = lightDirectionView / lightDistance;

	vec3 reflection_eye = reflect (-lightDirectionView, Normal);
	vec3 surface_to_viewer_eye = normalize (-vec3(Position));
	//float dot_prod_specular = dot (reflection_eye, surface_to_viewer_eye);

	// model how much light is available for this fragment
	float attenuation = 1.0 / (ConstantAttenuation + LinearAttenuation * lightDistance + QuadraticAttenuation * lightDistance * lightDistance);

	//attenuation = 0;

	// the direction of maximum highlight also changes per fragment
	//vec3 halfVector = normalize(lightDirectionView + EyeDirection);
	vec3 halfVector = normalize(lightDirectionView + EyeDirection);

	float diffuse = max(0.0, dot(Normal, lightDirectionView));
	//float specular = max(0.0, dot(Normal, halfVector));
	float specular = max (dot (reflection_eye, surface_to_viewer_eye), 0.0);

	//diffuse = 0.0;
	//specular = 0.0;

	if (diffuse == 0.0)
		specular = 0.0;
	else
		specular = pow(specular, Shininess) * Strength;

	//diffuse = 0.0;
	//specular = 0.0;

	//vec3 scatteredLight = Ambient + LightColor * diffuse * attenuation;
	//vec3 scatteredLight = LightColor * diffuse * attenuation;
	vec3 scatteredLight = Ambient + LightColor * diffuse ;
	vec3 reflectedLight = LightColor * specular * attenuation;
	vec3 rgb = min(Color.rgb * scatteredLight + reflectedLight ,vec3(1.0));
	outputF = vec4(rgb, Color.a);
	
	//vec4 scatteredLight1 = vec4(Ambient, 1.0); // this is the only light

	// modulate surface color with light, but saturate at white
	//outputF = min(Color * scatteredLight1, vec4(1.0));
	//outputF = vec4(Ambient, 1.0 );
	//outputF = Color ;

	//outputF = Color * 0.3 + Color * max(dot(Normal, u_lightDirection), 0.0);
	
	
}